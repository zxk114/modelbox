name: Publish modelbox images
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'new release version(e.g. v1.1.0)'
        required: true
        default: 'latest'
      imagetype:
        type: choice
        description: build type of image
        options:
        - all_types
        - cuda112_trt
        - cuda112_tf
        - cuda102_trt
        - cuda102_torch
        - x86d
        - armd

defaults:
  run:
    shell: bash

jobs:
  compile_cuda112_trt:
    if: inputs.imagetype == 'cuda112_trt' || inputs.imagetype == 'all_types'
    runs-on: ubuntu-latest
#    container: modelbox/modelbox-develop-tensorrt_8.4.2-cuda_11.2-${{matrix.osName}}-x86_64:latest
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
    steps:
      - name: Checkout
        uses: actions/checkout@main
#      - name: CMake
#        run: |
#          mkdir build
#          cd build
#          ldconfig
#          cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ALL_DEMO=on -DWITH_WEBUI=on
#      - name: Build
#        working-directory: build
#        run: |
#          make package -j8
#      - name: Release check
#        run: |
#          bash docker/artifact_check.sh ${{matrix.osName}}
#      - name: Prepare Artifact
#        run: |
#          mkdir artifact
#          cp -af build/release artifact/
#          ls -lh artifact
#      - name: Upload Artifact
#        uses: actions/upload-artifact@main
#        with:
#          name: modelbox_cuda112_trt_${{matrix.osName}}
#          path: artifact

  build_cuda112_trt_image:
    runs-on: ubuntu-latest
    needs: compile_cuda112_trt
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
        type: [develop, runtime]
    env:
      CUDA_VER: 11-2
      CUDA_VERSION: 11.2
      CUDA_CUDART_VERSION: 11.2.152-1
      TRT_VERSION: 8.4.2
      NVIDIA_CUDA_VERSION: 11.2.2
      NVIDIA_REQUIRE_CUDA: cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441
      imageName: zxk114/modelbox-${{matrix.type}}-tensorrt_8.4.2-cuda_11.2-${{matrix.osName}}-x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Login DockerHub
        uses: docker/login-action@master
        with:
          username: ${{github.actor}}
          password: ${{secrets.DOCKERHUB_TOKEN_ZXK}}
#      - name: Download Artifact
#        uses: actions/download-artifact@main
#        with:
#          name: modelbox_cuda112_trt_${{matrix.osName}}
#          path: .
      - name: Download ${{matrix.type}} package
        run: |
          bash docker/prepare_for_${{matrix.type}}.sh ${{matrix.osName}}
      - name: Build and Push
        uses: docker/build-push-action@master
        with:
          push: true
          context: .
          file: docker/Dockerfile.cuda.${{matrix.type}}2.${{matrix.osName}}
          build-args: |
            CUDA_VER=${{env.CUDA_VER}}
            CUDA_VERSION=${{env.CUDA_VERSION}}
            TRT_VERSION=${{env.TRT_VERSION}}
            CUDA_CUDART_VERSION=${{env.CUDA_CUDART_VERSION}}
            NVIDIA_CUDA_VERSION=${{env.NVIDIA_CUDA_VERSION}}
            NVIDIA_REQUIRE_CUDA=${{env.NVIDIA_REQUIRE_CUDA}}
          tags: |
            ${{env.imageName}}:latest
            ${{env.imageName}}:${{inputs.version}}
          #cache-from: type=registry,ref=${{env.imageName}}:buildx-cache
          cache-to: type=registry,ref=${{env.imageName}}:buildx-cache,mode=max
      - name: Get Regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 >regctl
          chmod +x regctl
      - name: Images Sync to GHCR
        run: |
          ./regctl image copy ${{env.imageName}}:latest ghcr.io/${{env.imageName}}:latest -v info
          ./regctl image copy ${{env.imageName}}:${{inputs.version}} ghcr.io/${{env.imageName}}:${{inputs.version}} -v info

  compile_cuda112_tf:
    if: inputs.imagetype == 'cuda112_tf' || inputs.imagetype == 'all_types'
    runs-on: ubuntu-latest
#    container: modelbox/modelbox-develop-tensorflow_2.6.0-cuda_11.2-${{matrix.osName}}-x86_64:latest
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
    steps:
      - name: Checkout
        uses: actions/checkout@main
#      - name: CMake
#        run: |
#          mkdir build
#          cd build
#          ldconfig
#          cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ALL_DEMO=on -DWITH_WEBUI=on
#      - name: Build
#        working-directory: build
#        run: |
#          make package -j8
#      - name: Release check
#        run: |
#          bash docker/artifact_check.sh ${{matrix.osName}}
#      - name: Prepare Artifact
#        run: |
#          mkdir artifact
#          cp -af build/release artifact/
#          ls -lh artifact
#      - name: Upload Artifact
#        uses: actions/upload-artifact@main
#        with:
#          name: modelbox_cuda112_tf_${{matrix.osName}}
#          path: artifact
          
  build_cuda112_tf_image:
    runs-on: ubuntu-latest
    needs: compile_cuda112_tf
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
        type: [develop, runtime]
    env:
      CUDA_VER: 11-2
      CUDA_VERSION: 11.2
      CUDA_CUDART_VERSION: 11.2.152-1
      TF_VERSION: 2.6.0
      NVIDIA_CUDA_VERSION: 11.2.2
      NVIDIA_REQUIRE_CUDA: cuda>=11.2 brand=tesla,driver>=418,driver<419 brand=tesla,driver>=440,driver<441
      imageName: zxk114/modelbox-${{matrix.type}}-tensorflow_2.6.0-cuda_11.2-${{matrix.osName}}-x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Login DockerHub
        uses: docker/login-action@master
        with:
          username: ${{github.actor}}
          password: ${{secrets.DOCKERHUB_TOKEN_ZXK}}
#      - name: Download Artifact
#        uses: actions/download-artifact@main
#        with:
#          name: modelbox_cuda112_tf_${{matrix.osName}}
#          path: .
      - name: Download ${{matrix.type}} package
        run: |
          bash docker/prepare_for_${{matrix.type}}.sh ${{matrix.osName}}
      - name: Build and Push
        uses: docker/build-push-action@master
        with:
          push: true
          context: .
          file: docker/Dockerfile.cuda.${{matrix.type}}2.${{matrix.osName}}
          build-args: |
            CUDA_VER=${{env.CUDA_VER}}
            CUDA_VERSION=${{env.CUDA_VERSION}}
            TF_VERSION=${{env.TF_VERSION}}
            CUDA_CUDART_VERSION=${{env.CUDA_CUDART_VERSION}}
            NVIDIA_CUDA_VERSION=${{env.NVIDIA_CUDA_VERSION}}
            NVIDIA_REQUIRE_CUDA=${{env.NVIDIA_REQUIRE_CUDA}}
          tags: |
            ${{env.imageName}}:latest
            ${{env.imageName}}:${{inputs.version}}
          #cache-from: type=registry,ref=${{env.imageName}}:buildx-cache
          cache-to: type=registry,ref=${{env.imageName}}:buildx-cache,mode=max
      - name: Get Regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 >regctl
          chmod +x regctl
      - name: Images Sync to GHCR
        run: |
          ./regctl image copy ${{env.imageName}}:latest ghcr.io/${{env.imageName}}:latest -v info
          ./regctl image copy ${{env.imageName}}:${{inputs.version}} ghcr.io/${{env.imageName}}:${{inputs.version}} -v info

  compile_cuda102_trt:
    if: inputs.imagetype == 'cuda102_trt' || inputs.imagetype == 'all_types'
    runs-on: ubuntu-latest
#    container: modelbox/modelbox-develop-tensorrt_7.1.3-cuda_10.2-${{matrix.osName}}-x86_64:latest
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
    steps:
      - name: Checkout
        uses: actions/checkout@main
#      - name: CMake
#        run: |
#          mkdir build
#          cd build
#          ldconfig
#          cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ALL_DEMO=on -DWITH_WEBUI=on
#      - name: Build
#        working-directory: build
#        run: |
#          make package -j8
#      - name: Release check
#        run: |
#          bash docker/artifact_check.sh ${{matrix.osName}}
#      - name: Prepare Artifact
#        run: |
#          mkdir artifact
#          cp -af build/release artifact/
#          ls -lh artifact
#      - name: Upload Artifact
#        uses: actions/upload-artifact@main
#        with:
#          name: modelbox_cuda102_trt_${{matrix.osName}}
#          path: artifact

  build_cuda102_trt_image:
    runs-on: ubuntu-latest
    needs: compile_cuda102_trt
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
        type: [develop, runtime]
    env:
      CUDA_VER: 10-2
      CUDA_VERSION: 10.2
      CUDA_CUDART_VERSION: 10.2.89-1
      TRT_VERSION: 7.1.3
      NVIDIA_CUDA_VERSION: 10.2.89
      NVIDIA_REQUIRE_CUDA: cuda>=10.2 brand=tesla,driver>=418,driver<419
      imageName: zxk114/modelbox-${{matrix.type}}-tensorrt_7.1.3-cuda_10.2-${{matrix.osName}}-x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Login DockerHub
        uses: docker/login-action@master
        with:
          username: ${{github.actor}}
          password: ${{secrets.DOCKERHUB_TOKEN_ZXK}}
#      - name: Download Artifact
#        uses: actions/download-artifact@main
#        with:
#          name: modelbox_cuda102_trt_${{matrix.osName}}
#          path: .
      - name: Download ${{matrix.type}} package
        run: |
          sed -i '/BASE_IMAGE/s/20/18/g' docker/Dockerfile.cuda.${{matrix.type}}2.ubuntu
          sed -i 's/python3.8/python3.7/g' docker/Dockerfile.cuda.${{matrix.type}}2.ubuntu
          sed -i 's/ubuntu2004/ubuntu1804/g' docker/Dockerfile.cuda.${{matrix.type}}2.ubuntu
          bash docker/prepare_for_${{matrix.type}}.sh ${{matrix.osName}} 18.04
      - name: Build and Push
        uses: docker/build-push-action@master
        with:
          push: true
          context: .
          file: docker/Dockerfile.cuda.${{matrix.type}}2.${{matrix.osName}}
          build-args: |
            CUDA_VER=${{env.CUDA_VER}}
            CUDA_VERSION=${{env.CUDA_VERSION}}
            TRT_VERSION=${{env.TRT_VERSION}}
            CUDA_CUDART_VERSION=${{env.CUDA_CUDART_VERSION}}
            NVIDIA_CUDA_VERSION=${{env.NVIDIA_CUDA_VERSION}}
            NVIDIA_REQUIRE_CUDA=${{env.NVIDIA_REQUIRE_CUDA}}
          tags: |
            ${{env.imageName}}:latest
            ${{env.imageName}}:${{inputs.version}}
          #cache-from: type=registry,ref=${{env.imageName}}:buildx-cache
          cache-to: type=registry,ref=${{env.imageName}}:buildx-cache,mode=max
      - name: Get Regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 >regctl
          chmod +x regctl
      - name: Images Sync to GHCR
        run: |
          ./regctl image copy ${{env.imageName}}:latest ghcr.io/${{env.imageName}}:latest -v info
          ./regctl image copy ${{env.imageName}}:${{inputs.version}} ghcr.io/${{env.imageName}}:${{inputs.version}} -v info

  compile_cuda102_torch:
    if: inputs.imagetype == 'cuda102_torch' || inputs.imagetype == 'all_types'
    runs-on: ubuntu-latest
#    container: modelbox/modelbox-develop-libtorch_1.9.1-cuda_10.2-${{matrix.osName}}-x86_64:latest
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
    steps:
      - name: Checkout
        uses: actions/checkout@main
#      - name: CMake
#        run: |
#          mkdir build
#          cd build
#          ldconfig
#          cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ALL_DEMO=on -DWITH_WEBUI=on
#      - name: Build
#        working-directory: build
#        run: |
#          make package -j8
#      - name: Release check
#        run: bash docker/artifact_check.sh ${{matrix.osName}}
#      - name: Prepare Artifact
#        run: |
#          mkdir artifact
#          cp -af build/release artifact/
#          ls -lh artifact
#      - name: Upload Artifact
#        uses: actions/upload-artifact@main
#        with:
#          name: modelbox_cuda102_torch_${{matrix.osName}}
#          path: artifact

  build_cuda102_torch_image:
    runs-on: ubuntu-latest
    needs: compile_cuda102_torch
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
        type: [develop, runtime]
    env:
      CUDA_VER: 10-2
      CUDA_VERSION: 10.2
      CUDA_CUDART_VERSION: 10.2.89-1
      TORCH_VERSION: 1.9.1
      NVIDIA_CUDA_VERSION: 10.2.89
      NVIDIA_REQUIRE_CUDA: cuda>=10.2 brand=tesla,driver>=418,driver<419
      imageName: zxk114/modelbox-${{matrix.type}}-libtorch_1.9.1-cuda_10.2-${{matrix.osName}}-x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Login DockerHub
        uses: docker/login-action@master
        with:
          username: ${{github.actor}}
          password: ${{secrets.DOCKERHUB_TOKEN_ZXK}}
#      - name: Download Artifact
#        uses: actions/download-artifact@main
#        with:
#          name: modelbox_cuda102_torch_${{matrix.osName}}
#          path: .
      - name: Download ${{matrix.type}} package
        run: |
          sed -i '/BASE_IMAGE/s/20/18/g' docker/Dockerfile.cuda.${{matrix.type}}2.ubuntu
          sed -i 's/python3.8/python3.7/g' docker/Dockerfile.cuda.${{matrix.type}}2.ubuntu
          sed -i 's/ubuntu2004/ubuntu1804/g' docker/Dockerfile.cuda.${{matrix.type}}2.ubuntu
          bash docker/prepare_for_${{matrix.type}}.sh ${{matrix.osName}} 18.04
      - name: Build and Push
        uses: docker/build-push-action@master
        with:
          push: true
          context: .
          file: docker/Dockerfile.cuda.${{matrix.type}}2.${{matrix.osName}}
          build-args: |
            CUDA_VER=${{env.CUDA_VER}}
            CUDA_VERSION=${{env.CUDA_VERSION}}
            TORCH_VERSION=${{env.TORCH_VERSION}}
            CUDA_CUDART_VERSION=${{env.CUDA_CUDART_VERSION}}
            NVIDIA_CUDA_VERSION=${{env.NVIDIA_CUDA_VERSION}}
            NVIDIA_REQUIRE_CUDA=${{env.NVIDIA_REQUIRE_CUDA}}
          tags: |
            ${{env.imageName}}:latest
            ${{env.imageName}}:${{inputs.version}}
          #cache-from: type=registry,ref=${{env.imageName}}:buildx-cache
          cache-to: type=registry,ref=${{env.imageName}}:buildx-cache,mode=max
      - name: Get Regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 >regctl
          chmod +x regctl
      - name: Images Sync to GHCR
        run: |
          ./regctl image copy ${{env.imageName}}:latest ghcr.io/${{env.imageName}}:latest -v info
          ./regctl image copy ${{env.imageName}}:${{inputs.version}} ghcr.io/${{env.imageName}}:${{inputs.version}} -v info

  compile_x86d:
    if: inputs.imagetype == 'x86d' || inputs.imagetype == 'all_types'
    runs-on: ubuntu-latest
#    container: modelbox/modelbox-develop-mindspore_1.9.0-cann_6.0.1-d${{matrix.dtype}}-${{matrix.osName}}-x86_64:latest
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
        dtype: [310, 310p]
    steps:
      - name: Checkout
        uses: actions/checkout@main
#      - name: CMake
#        run: |
#          mkdir build
#          cd build
#          ldconfig
#          cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ALL_DEMO=on -DWITH_WEBUI=on
#      - name: Build
#        working-directory: build
#        run: |
#          make package -j8
#      - name: Release check
#        run: bash docker/artifact_check.sh ${{matrix.osName}}
#      - name: Prepare Artifact
#        run: |
#          mkdir artifact
#          cp -af build/release artifact/
#          ls -lh artifact
#      - name: Upload Artifact
#        uses: actions/upload-artifact@main
#        with:
#          name: modelbox_x86d${{matrix.dtype}}_${{matrix.osName}}
#          path: artifact

  build_x86d_image:
    runs-on: ubuntu-latest
    needs: compile_x86d
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
        type: [develop, runtime]
        dtype: [310, 310p]
    env:
      imageName: zxk114/modelbox-${{matrix.type}}-mindspore_1.9.0-cann_6.0.1-d${{matrix.dtype}}-${{matrix.osName}}-x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Login DockerHub
        uses: docker/login-action@master
        with:
          username: ${{github.actor}}
          password: ${{secrets.DOCKERHUB_TOKEN_ZXK}}
#      - name: Download Artifact
#        uses: actions/download-artifact@main
#        with:
#          name: modelbox_x86d${{matrix.dtype}}_${{matrix.osName}}
#          path: .
      - name: Download ${{matrix.type}} package
        run: |
          bash docker/prepare_for_${{matrix.type}}.sh ${{matrix.osName}}
      - name: Build and Push
        uses: docker/build-push-action@master
        with:
          push: true
          context: .
          file: docker/Dockerfile.ascend.${{matrix.type}}2.${{matrix.osName}}
          build-args: dtype=${{matrix.dtype}}
          tags: |
            ${{env.imageName}}:latest
            ${{env.imageName}}:${{inputs.version}}
          #cache-from: type=registry,ref=${{env.imageName}}:buildx-cache
          cache-to: type=registry,ref=${{env.imageName}}:buildx-cache,mode=max
      - name: Get Regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 >regctl
          chmod +x regctl
      - name: Images Sync to GHCR
        run: |
          ./regctl image copy ${{env.imageName}}:latest ghcr.io/${{env.imageName}}:latest -v info
          ./regctl image copy ${{env.imageName}}:${{inputs.version}} ghcr.io/${{env.imageName}}:${{inputs.version}} -v info

  compile_armd310:
    if: inputs.imagetype == 'armd' || inputs.imagetype == 'all_types'
    runs-on: ${{matrix.osName}}-d310
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
    steps:
      - name: Checkout
        uses: actions/checkout@main
#      - name: CMake
#        run: |
#          sed -i 's@https://gitcode.net/mirrors/nlohmann/json/-/archive/v3.7.3@http://192.168.59.29@g' thirdparty/CMake/pre-download.in
#          sed -i 's@https://gitee.com/modelbox/modelbox-binary/attach_files/1010735/download@http://192.168.59.29@g' thirdparty/CMake/pre-download.in
#          mkdir build
#          cd build
#          ldconfig
#          cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ALL_DEMO=on -DWITH_WEBUI=on -DUSE_CN_MIRROR=yes
#      - name: Build
#        working-directory: build
#        run: |
#          make package -j8
#      - name: Release check
#        run: bash docker/artifact_check.sh ${{matrix.osName}}
#      - name: Prepare Artifact
#        run: |
#          mkdir artifact
#          cp -af build/release artifact/
#          ls -lh artifact
#      - name: Upload Artifact
#        uses: actions/upload-artifact@main
#        with:
#          name: modelbox_armd310_${{matrix.osName}}
#          path: artifact

  build_armd310_image:
    runs-on: ubuntu-latest
    needs: compile_armd310
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
        type: [develop, runtime]
    env:
      imageName: zxk114/modelbox-${{matrix.type}}-mindspore_1.9.0-cann_6.0.1-d310-${{matrix.osName}}-aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Login DockerHub
        uses: docker/login-action@master
        with:
          username: ${{github.actor}}
          password: ${{secrets.DOCKERHUB_TOKEN_ZXK}}
#      - name: Download Artifact
#        uses: actions/download-artifact@main
#        with:
#          name: modelbox_armd310_${{matrix.osName}}
#          path: .
      - name: Download ${{matrix.type}} package
        run: |
          sed -i '3s/PLATFROM=.*/PLATFROM=aarch64/g' docker/prepare_for_${{matrix.type}}.sh
          bash docker/prepare_for_${{matrix.type}}.sh ${{matrix.osName}}
      - name: Build and Push
        uses: docker/build-push-action@master
        with:
          push: true
          context: .
          platforms: linux/arm64
          file: docker/Dockerfile.ascend.${{matrix.type}}2.${{matrix.osName}}
          build-args: dtype=310
          tags: |
            ${{env.imageName}}:latest
            ${{env.imageName}}:${{inputs.version}}
          #cache-from: type=registry,ref=${{env.imageName}}:buildx-cache
          cache-to: type=registry,ref=${{env.imageName}}:buildx-cache,mode=max
      - name: Get Regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 >regctl
          chmod +x regctl
      - name: Images Sync to GHCR
        run: |
          ./regctl image copy ${{env.imageName}}:latest ghcr.io/${{env.imageName}}:latest -v info
          ./regctl image copy ${{env.imageName}}:${{inputs.version}} ghcr.io/${{env.imageName}}:${{inputs.version}} -v info

  compile_armd310p:
    runs-on: ${{matrix.osName}}-d310p
    needs: compile_armd310
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
    steps:
      - name: Checkout
        uses: actions/checkout@main
#     - name: CMake
#       run: |
#         sed -i 's@https://gitcode.net/mirrors/nlohmann/json/-/archive/v3.7.3@http://192.168.59.29@g' thirdparty/CMake/pre-download.in
#         sed -i 's@https://gitee.com/modelbox/modelbox-binary/attach_files/1010735/download@http://192.168.59.29@g' thirdparty/CMake/pre-download.in
#         mkdir build
#         cd build
#         ldconfig
#         echo "***************************"
#         export $(cat /proc/1/environ|tr "\\0" "\\n"|xargs)
#         source /usr/local/Ascend/ascend-toolkit/set_env.sh
#         env|grep -v GITHUB
#         echo "***************************"
#         cmake .. -DCMAKE_BUILD_TYPE=Release -DWITH_ALL_DEMO=on -DWITH_WEBUI=on -DUSE_CN_MIRROR=yes
#     - name: Build
#       working-directory: build
#       run: |
#         make package -j8
#     - name: Release check
#       run: bash docker/artifact_check.sh ${{matrix.osName}}
#      - name: Prepare Artifact
#        run: |
#          mkdir artifact
#          cp -af build/release artifact/
#          ls -lh artifact
#      - name: Upload Artifact
#        uses: actions/upload-artifact@main
#        with:
#          name: modelbox_armd310p_${{matrix.osName}}
#          path: artifact

  build_armd310p_image:
    runs-on: ubuntu-latest
    needs: compile_armd310p
    strategy:
      matrix:
        osName: [ubuntu, openeuler]
        type: [develop, runtime]
    env:
      imageName: zxk114/modelbox-${{matrix.type}}-mindspore_1.9.0-cann_6.0.1-d310p-${{matrix.osName}}-aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
      - name: Login GHCR
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Login DockerHub
        uses: docker/login-action@master
        with:
          username: ${{github.actor}}
          password: ${{secrets.DOCKERHUB_TOKEN_ZXK}}
#      - name: Download Artifact
#        uses: actions/download-artifact@main
#        with:
#          name: modelbox_armd310p_${{matrix.osName}}
#          path: .
      - name: Download ${{matrix.type}} package
        run: |
          sed -i '3s/PLATFROM=.*/PLATFROM=aarch64/g' docker/prepare_for_${{matrix.type}}.sh
          bash docker/prepare_for_${{matrix.type}}.sh ${{matrix.osName}}
      - name: Build and Push
        uses: docker/build-push-action@master
        with:
          push: true
          context: .
          platforms: linux/arm64
          file: docker/Dockerfile.ascend.${{matrix.type}}2.${{matrix.osName}}
          build-args: dtype=310p
          tags: |
            ${{env.imageName}}:latest
            ${{env.imageName}}:${{inputs.version}}
          #cache-from: type=registry,ref=${{env.imageName}}:buildx-cache
          cache-to: type=registry,ref=${{env.imageName}}:buildx-cache,mode=max
      - name: Get Regctl
        run: |
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 >regctl
          chmod +x regctl
      - name: Images Sync to GHCR
        run: |
          ./regctl image copy ${{env.imageName}}:latest ghcr.io/${{env.imageName}}:latest -v info
          ./regctl image copy ${{env.imageName}}:${{inputs.version}} ghcr.io/${{env.imageName}}:${{inputs.version}} -v info
