name: Package for arm

on:
  workflow_dispatch:
    inputs:
      package_name:
        type: choice
        description: package for test
        options: 
        - glog_2003
        - mqtt_2003
        - duktape_2003
        - cpprestsdk_2003
        - ffmpeg_2003
        - opencv_2003
        - opencv_2004
        - all_package

jobs:
  glog_2003:
    if: inputs.package_name == 'glog_2003' || inputs.package_name == 'all_package'
    runs-on: [self-hosted,ARM64,openeuler-d310]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: 'google/glog'
          ref: 'v0.6.0'
      - name: CMake
        run: |
          mkdir build
          cd build
          cmake .. \
               -D CMAKE_INSTALL_PREFIX=/usr/local \
               -D CMAKE_INSTALL_LIBDIR=/usr/local/lib64 \
               -D CMAKE_POSITION_INDEPENDENT_CODE=ON \
               -D BUILD_SHARED_LIBS=ON \
               -D CMAKE_BUILD_TYPE=Release
      - name: Build
        working-directory: build
        run: |
          make -j$[$(nproc) * 2]
          rm -rf /usr/local/{bin,lib64.include,shre}/*
          make install
      - name: Package
        run: |
          cd /usr/local
          rm -rf lib64/python* lib64/*.a
          ls -lh lib64 include
          tar zcf glog_0.6.0-openeuler20.03-aarch64.tar.gz lib64
          tar zcf glog_0.6.0-devel-openeuler20.03-aarch64.tar.gz lib64 include
          ldd /usr/local/lib64/libglog.so
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: glog_0.6.0-openeuler20.03-aarch64
          path: |
            /usr/local/glog_0.6.0-openeuler20.03-aarch64.tar.gz
            /usr/local/glog_0.6.0-devel-openeuler20.03-aarch64.tar.gz

  mqtt_2003:
    if: inputs.package_name == 'mqtt_2003' || inputs.package_name == 'all_package'
    runs-on: [self-hosted,ARM64,openeuler-d310]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: 'eclipse/paho.mqtt.c'
          ref: 'v1.3.12'
      - name: Cmake
        run: |
          mkdir build
          cd build
          cmake .. \
             -D CMAKE_INSTALL_PREFIX=/usr/local \
             -D CMAKE_INSTALL_LIBDIR=/usr/local/lib64 \
             -D PAHO_WITH_SSL=TRUE
      - name: Build
        working-directory: build
        run: |
          make -j$[$(nproc) * 2]
          rm -rf /usr/local/{bin,lib64.include,shre}/*
          make install
      - name: Package
        run: |
          cd /usr/local
          rm -rf lib64/python* lib64/*.a
          ls -lh bin lib64 include share
          tar zcf mqtt_1.3.12-openeuler20.03-aarch64.tar.gz bin lib64
          tar zcf mqtt_1.3.12-devel-openeuler20.03-aarch64.tar.gz bin lib64 include share
          ldd /usr/local/lib64/libpaho-mqtt3cs.so
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: mqtt_1.3.12-openeuler20.03-aarch64
          path: |
            /usr/local/mqtt_1.3.12-openeuler20.03-aarch64.tar.gz
            /usr/local/mqtt_1.3.12-devel-openeuler20.03-aarch64.tar.gz

  cpprestsdk_2003:
    if: inputs.package_name == 'cpprestsdk_2003' || inputs.package_name == 'all_package'
    runs-on: [self-hosted,ARM64,openeuler-d310]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: 'microsoft/cpprestsdk'
          ref: 'v2.10.18'
          submodules: 'recursive'
      - name: CMake
        run: |
          echo 'set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-protector-all -W1,-z,relro,-z,now-z,noexecstack -fPIC")' >>CmakeLists.txt
          echo 'set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fstack-protector-all -W1,-z,relro,-z,now-z,noexecstack -fPIC")' >>CmakeLists.txt
          echo 'set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -W1,-z,relro,-z,now-z,noexecstack -pie")' >>CmakeLists.txt
          echo 'set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -W1,-z,relro,-z,now-z,noexecstack")' >>CmakeLists.txt
          sed -i '198s/40/1000/g' Release/src/pplx/threadpool.cpp
          sed -i '91s/"%8zX", bytes_read/"%8X", (std::uint32_t)bytes_read/g' Release/src/http/common/http_helpers.cpp
          mkdir build
          cd build
          cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release
      - name: Build
        working-directory: build
        run: |
          ninja
      - name: Package
        working-directory: build
        run: |
          mkdir lib64
          cp -af Release/Binaries/libcpprest.so* lib64/
          cp -af ../Release/include .
          ls -lh lib64 include
          tar zcf cpprestsdk_2.10.18-openeuler20.03-aarch64.tar.gz lib64
          tar zcf cpprestsdk_2.10.18-devel-openeuler20.03-aarch64.tar.gz lib64 include
          cp -af *.tar.gz ../
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: cpprestsdk_2.10.18-openeuler20.03-aarch64
          path: |
            cpprestsdk_2.10.18-openeuler20.03-aarch64.tar.gz
            cpprestsdk_2.10.18-devel-openeuler20.03-aarch64.tar.gz

  duktape_2003:
    if: inputs.package_name == 'duktape_2003' || inputs.package_name == 'all_package'
    runs-on: [self-hosted,ARM64,openeuler-d310]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: 'svaarala/duktape'
          ref: 'v2.6.0'
      - name: Configure
        run: |
          curl -LO https://github.com/svaarala/duktape/releases/download/v2.6.0/duktape-2.6.0.tar.xz
          tar xf duktape-2.6.0.tar.xz
      - name: Build
        run: |
          chown -R root.root duktape-2.6.0
          cd duktape-2.6.0/src
          gcc ./duktape.c -fPIC --shared -o libduktape.so
          ldd libduktape.so
      - name: Package
        run: |
          mkdir lib64 include
          cp -af duktape-2.6.0/src/libduktape.so lib64/
          cp -af duktape-2.6.0/src/*.h include/
          ls -lh lib64 include
          tar zcf duktape_2.6.0-openeuler20.03-aarch64.tar.gz lib64
          tar zcf duktape_2.6.0-devel-openeuler20.03-aarch64.tar.gz lib64 include
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: duktape_2.6.0-openeuler20.03-aarch64
          path: |
            duktape_2.6.0-openeuler20.03-aarch64.tar.gz
            duktape_2.6.0-devel-openeuler20.03-aarch64.tar.gz

  ffmpeg_2003:
    if: inputs.package_name == 'ffmpeg_2003' || inputs.package_name == 'all_package'
    runs-on: [self-hosted,ARM64,openeuler-d310]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: 'FFmpeg/FFmpeg'
          ref: 'n4.4.3'
      - name: Checkout librtmp
        uses: actions/checkout@main
        with:
          repository: 'ossrs/librtmp'
          path: 'librtmp'
      - name: Checkout headers
        uses: actions/checkout@main
        with:
          repository: 'FFmpeg/nv-codec-headers'
          path: 'nv-codec-headers'
      - name: Build rtmpdump
        run: |
          cd librtmp
          sed -i '64s/SBINDIR/BINDIR/g' Makefile
          sed -i '7s;/lib;/lib64;g' librtmp/Makefile
          sed -i '/GNUTLS/s/^#CRYPTO=/CRYPTO=/' Makefile librtmp/Makefile
          sed -i '/OPENSSL/s/^CRYPTO=/#&/' Makefile librtmp/Makefile
          make -j$[$(nproc) * 2]
          rm -rf /usr/local/{bin,lib64,include,share}/*
          make install
      - name: Build nv-codec-headers
        run: |
          cd nv-codec-headers
          make -j$[$(nproc) * 2]
          make install
          cat /usr/local/lib64/pkgconfig/librtmp.pc
          ls -lh /usr/local/{bin,lib64,include,share}
          ls -lh /usr/local/lib64/pkgconfig/
      - name: CMake
        run: |
          export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig
          ./configure \
              --prefix=/usr/local \
              --libdir=/usr/local/lib64 \
              --enable-shared \
              --disable-doc \
              --enable-gpl \
              --enable-pthreads \
              --enable-ffplay \
              --enable-openssl \
              --enable-nonfree \
              --enable-librtmp
      - name: Build
        run: |
          make -j$[$(nproc) * 2]
          make install
      - name: Package
        run: |
          cd /usr/local/
          rm -rf lib64/python* lib64/*.a
          ls -lh bin lib64 include share
          tar zcf ffmpeg_4.4.3-openeuler20.03-aarch64.tar.gz bin lib64
          tar zcf ffmpeg_4.4.3-devel-openeuler20.03-aarch64.tar.gz bin lib64 include share
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: ffmpeg_4.4.3-openeuler20.03-aarch64
          path: |
            /usr/local/ffmpeg_4.4.3-openeuler20.03-aarch64.tar.gz
            /usr/local/ffmpeg_4.4.3-devel-openeuler20.03-aarch64.tar.gz

  opencv_2003:
    if: inputs.package_name == 'opencv_2003'
    runs-on: [self-hosted,ARM64,openeuler-d310]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: 'opencv/opencv'
          ref: '4.5.5'
      - name: Checkout_3rd
        uses: actions/checkout@main
        with:
          repository: 'opencv/opencv_contrib'
          ref: '4.5.5'
          path: 'opencv_contrib'
      - name: Install FFmpeg
        run: |
          curl -LO https://github.com/modelbox-ai/modelbox-binary/releases/download/BinaryArchive/glog_0.6.0-devel-openeuler20.03-aarch64.tar.gz
          curl -LO https://github.com/modelbox-ai/modelbox-binary/releases/download/BinaryArchive/ffmpeg_4.4.3-devel-openeuler20.03-aarch64.tar.gz
          ls -lh *.tar.gz
          tar zxf glog_0.6.0-devel-openeuler20.03-aarch64.tar.gz -C /usr/local
          tar zxf ffmpeg_4.4.3-devel-openeuler20.03-aarch64.tar.gz -C /usr/local
      - name: CMake
        run: |
          mkdir build
          cd build
          export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig
          export PYTHONPATH=/usr/local/lib64/python3.7/site-packages
          export PYTHON_LIBRARY=/usr/local/lib64/python3.7
          cmake .. \
                -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
                -DCMAKE_INSTALL_PREFIX=/usr/local/ \
                -DINSTALL_LIBDIR=/usr/local/lib64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_opencv_xfeatures2d=OFF \
                -DBUILD_opencv_wechat_qrcode=OFF \
                -DENABLE_CXX11=ON \
                -DWITH_TBB=ON \
                -DBUILD_TBB=ON \
                -DWITH_OPENMP=OFF \
                -DBUILD_OPENMP=OFF \
                -DWITH_GSTREAMER=OFF \
                -DBUILD_TESTS=OFF
      - name: Build
        working-directory: build
        run: |
          make -j$[$(nproc) * 2]
          rm -rf /usr/local/{bin,include,lib64,share}/*
          make install
      - name: Package
        run: |
          cd /usr/local/
          ln -sf opencv4/opencv2 include/opencv2
          rm -rf lib64/python* lib64/*.a
          cp -af lib/python3.7 lib64/
          ls -lh bin include lib64 share
          tar zcf opencv_4.5.5-openeuler20.03-aarch64.tar.gz bin lib64
          tar zcf opencv_4.5.5-devel-openeuler20.03-aarch64.tar.gz bin include lib64 share
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: opencv_4.5.5-openeuler20.03-aarch64
          path: |
            /usr/local/opencv_4.5.5-openeuler20.03-aarch64.tar.gz
            /usr/local/opencv_4.5.5-devel-openeuler20.03-aarch64.tar.gz


  opencv_2004:
    if: inputs.package_name == 'opencv_2004' || inputs.package_name == 'all_package'
    runs-on: [self-hosted,ARM64,ubuntu-d310]
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: 'opencv/opencv'
          ref: '4.5.5'
      - name: Checkout_3rd
        uses: actions/checkout@main
        with:
          repository: 'opencv/opencv_contrib'
          ref: '4.5.5'
          path: 'opencv_contrib'
      - name: CMake
        run: |
          mkdir build
          cd build
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
          cmake .. \
                -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
                -DCMAKE_INSTALL_PREFIX=/usr/local/ \
                -DINSTALL_LIBDIR=/usr/local/lib \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_opencv_xfeatures2d=OFF \
                -DBUILD_opencv_wechat_qrcode=OFF \
                -DENABLE_CXX11=ON \
                -DWITH_TBB=ON \
                -DBUILD_TBB=ON \
                -DWITH_OPENMP=OFF \
                -DBUILD_OPENMP=OFF \
                -DWITH_GSTREAMER=OFF \
                -DBUILD_TESTS=OFF
      - name: Build
        working-directory: build
        run: |
          make -j$[$(nproc) * 2]
          rm -rf /usr/local/{bin,include,lib,share}/*
          make install
      - name: Package
        run: |
          cd /usr/local/
          ln -sf opencv4/opencv2 include/opencv2
          rm -rf lib64/python* lib/*.a
          ls -lh bin include lib share
          tar zcf opencv_4.5.5-ubuntu20.04-aarch64.tar.gz bin lib
          tar zcf opencv_4.5.5-dev-ubuntu20.04-aarch64.tar.gz bin include lib share
      - name: Upload Artifact
        uses: actions/upload-artifact@main
        with:
          name: opencv_4.5.5-ubuntu20.04-aarch64
          path: |
            /usr/local/opencv_4.5.5-ubuntu20.04-aarch64.tar.gz
            /usr/local/opencv_4.5.5-dev-ubuntu20.04-aarch64.tar.gz

